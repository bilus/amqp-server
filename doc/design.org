#+title: Design

* DONE Implement channel.
* DONE Fix: error reading frame EOF
* TODO Fix: client unexpectedly closed connection
It is a timeout. Need to add heartbeats after all.
* TODO Clean up states in the diagram (mark intermediate states such as Started)
* TODO Write a connect test.
* TODO Timeout when writing, esp. handleError
What if client is not reading.
* TODO Handle close sent from client.
* TODO Preperly handle close close-ok
Right now, we do send close but there is nil thunk so we never listen for response.
* TODO Implement heartbeat
https://github.com/elastic/beats/blob/master/heartbeat/scheduler/scheduler.go
** TODO Client heartbeat
Just reset whenever reading anything + handle heartbeat frames.
#+begin_src go
if conn.heartbeatTimeout > 0 {
	if err = conn.netConn.SetReadDeadline(time.Now().Add(time.Duration(conn.heartbeatTimeout) * time.Second)); err != nil {
		conn.logger.WithError(err).Warn("reading frame")
		return
  }
}
#+end_src
** TODO Signal we don't support heartbeat by giving interval = 0 and create a TODO to add it later
* TODO Signal 503 if heartbeat etc. received on non-zero chan.
* Connection States

#+begin_src plantuml :file states.png
[*]-u->Connected: C send-header
Connected->Starting: S start
Starting->Started: C start-ok
Started-->Securing: S secure
Securing-->Secured: C secure-ok
Secured-->Tuning: S tune
Started-->Tuning: S tune
Tuning-l->Tuned: C tune-ok
Tuned-l->Opening: C open
Opening-l->Open: S open-ok
Open-u->Closing: S/C close
Closing-u->Closed: C/S close-ok
Closed-->[*]
#+end_src

#+RESULTS:
[[file:states.png]]
