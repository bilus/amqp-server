#+title: Design
* Load-testing
** 3cae601c-4414-11ee-8f95-aa665a14436d
** c0b1697c-4414-11ee-a1da-aa665a14436d
** 5cd63120-4415-11ee-80b3-aa665a14436d
** 55a07af4-4416-11ee-b641-aa665a14436d
** d6a079e2-4416-11ee-a515-aa665a14436d
** 4e33f60a-4417-11ee-b823-aa665a14436d

* DONE Implement channel.
* DONE Fix: error reading frame EOF
* DONE Preperly handle close close-ok
Right now, we do send close but there is nil thunk so we never listen for response.
* DONE Handle close sent from client.
* DONE Fix: client unexpectedly closed connection
It is a timeout. Need to add heartbeats after all.
* DONE Implement a minimal heartbeat using a separate go routine
* TODO Write a connect test.
* TODO Timeout when writing, esp. handleError
What if client is not reading.
* TODO Implement heartbeat without a separate go routine for each connection
https://github.com/elastic/beats/blob/master/heartbeat/scheduler/scheduler.go
- epoll
- lock-free priority queue
- lock-free skip list
** TODO Client heartbeat
Just reset whenever reading anything + handle heartbeat frames.
#+begin_src go
if conn.heartbeatTimeout > 0 {
	if err = conn.netConn.SetReadDeadline(time.Now().Add(time.Duration(conn.heartbeatTimeout) * time.Second)); err != nil {
		conn.logger.WithError(err).Warn("reading frame")
		return
  }
}
#+end_src
* TODO Clean up states in the diagram (mark intermediate states such as Started)
* TODO Signal 503 if heartbeat etc. received on non-zero chan.
* Polling writer
https://github.com/rs/zerolog/blob/master/diode/diode.go
* Connection States

#+begin_src plantuml :file states.png
skinparam state {
        BorderColor<<internal>> gray
}
[*]-u->Connected: C send-header
Connected->Starting: S start
Starting->Started: C start-ok
Started-->Securing: S secure
state Securing #line.dotted
state Secured #line.dotted
Securing-->Secured: C secure-ok
Secured-->Tuning: S tune
/'
 ' state Started #line.dotted : implicit
 '/
Started-->Tuning: S tune
Tuning-l->Tuned: C tune-ok
state Opening <<choice>>
Tuned-l->Opening: C open
Opening-l->Open: S open-ok
Open-u->Closing: S/C close
Closing-u->Closed: C/S close-ok
Closed-->[*]
#+end_src

#+RESULTS:
[[file:states.png]]
